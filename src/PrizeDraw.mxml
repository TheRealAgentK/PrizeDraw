<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   creationComplete="init()" xmlns:view="nz.co.ventego.demo.ix.prizeDraw.view.*">
	
	<fx:Style source="assets/css/main.css"/>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import nz.co.codec.flexorm.EntityManager;
			import nz.co.ventego.demo.ix.prizeDraw.business.AttendeeManager;
			import nz.co.ventego.demo.ix.prizeDraw.business.MeetingManager;
			import nz.co.ventego.demo.ix.prizeDraw.event.AttendeeEvent;
			import nz.co.ventego.demo.ix.prizeDraw.event.MeetingEvent;
			import nz.co.ventego.demo.ix.prizeDraw.model.AttendeeVO;
			import nz.co.ventego.demo.ix.prizeDraw.model.MeetingVO;
			import nz.co.ventego.demo.ix.prizeDraw.model.ModelLocator;

			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			private var entityManager:EntityManager = EntityManager.instance;
			
			private function init():void
			{
				setupORM();
				MeetingManager.loadInitialData();
				AttendeeManager.loadInitialData();
			}
			
			private function setupORM():void
			{
				var dbFile:File = File.applicationStorageDirectory.resolvePath("prizeDraw.db");
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(dbFile);
				entityManager.sqlConnection = sqlConnection;	
			}
			
			private function newMeetingHandler(e:MeetingEvent):void
			{
				var meeting:MeetingVO = e.meeting;
				MeetingManager.addMeeting(meeting);
			}
			
			private function deleteMeetingHandler(e:MeetingEvent):void
			{
				var meeting:MeetingVO = e.meeting;
				MeetingManager.deleteMeeting(meeting);
			}
			
			private function updateMeetingHandler(e:MeetingEvent):void
			{
				var meeting:MeetingVO = e.meeting;
				MeetingManager.updateMeeting(meeting);
			}
			
			private function newAttendeeHandler(e:AttendeeEvent):void
			{
				var attendee:AttendeeVO = e.attendee;
				AttendeeManager.addAttendee(attendee);
			}
			
			private function deleteAttendeeHandler(e:AttendeeEvent):void
			{
				var attendee:AttendeeVO = e.attendee;
				AttendeeManager.deleteAttendee(attendee);
			}
			
			private function updateAttendeeHandler(e:AttendeeEvent):void
			{
				var attendee:AttendeeVO = e.attendee;
				AttendeeManager.updateAttendee(attendee);
			}
			
			private function exportMeetingData(e:MeetingEvent):void
			{
				var meeting:MeetingVO = e.meeting;
				var exportFileName:String = e.exportFileName;
				MeetingManager.exportMeetingData(meeting,exportFileName);
			}
			
			private function exportMeetingDataNative(e:MeetingEvent):void
			{
				var meeting:MeetingVO = e.meeting;
				MeetingManager.exportMeetingDataNative(meeting);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:TabNavigator width="100%" height="100%">
		
		<view:MeetingView meetings="{model.meetings}" createMeeting="newMeetingHandler(event)" updateMeeting="updateMeetingHandler(event)" deleteMeeting="deleteMeetingHandler(event)"/>
		
		<view:AttendeeView attendees="{model.attendees}" meetings="{model.meetings}" createAttendee="newAttendeeHandler(event)" updateAttendee="updateAttendeeHandler(event)" deleteAttendee="deleteAttendeeHandler(event)"/>
		
		<view:ExportImportView attendees="{model.attendees}" meetings="{model.meetings}" exportMeetingData="exportMeetingData(event)" exportMeetingDataNative="exportMeetingDataNative(event)"/>
		
		<view:PrizeDrawView meetings="{model.meetings}" attendees="{model.attendees}" drawAttendee="updateAttendeeHandler(event)"/>
			
	</mx:TabNavigator>
	
</s:WindowedApplication>
